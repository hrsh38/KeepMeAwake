function [y1] = myNeuralNetworkFunction1(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 17-Sep-2016 15:02:58.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx8 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1.3293136e-10;3.021026e-11;6.939244e-11;1.45775527e-11;9.00591459e-08;4.23187263e-10;1.50637058e-13;1.6081836e-07];
x1_step1.gain = [22.4932205769562;121.831818611366;2.76387433850716;6868.84928966146;2.00000058011846;2.02721424935087;10.9945040728104;2.22134272061422];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.8994677391292436;-1.4114910245558716;-1.0188221008948479;-0.46920495628579295;0.21535048260388898;0.20763081739278341;0.43961485988740445;1.0195757631470728;-1.2304511530869713;1.8823596932357498];
IW1_1 = [0.77227272465223207 -0.075138990281846202 -0.10519134367835752 -0.36474284436510707 0.98254554195971389 -0.48989608493287706 0.55304179800340081 -1.0512546910907017;0.090778227650885557 -1.1440708809894873 -0.71751086815342846 0.21720085752817708 -0.47947738058885742 -1.3705111165549324 -0.20075213897940802 -0.075357318568231635;1.1014553874915574 0.76266047743319187 -0.47173940306821849 0.15283131919017712 0.45101450799875364 -0.83053757966106856 0.62615633101685086 -0.37173016529973674;-0.084203979781534433 0.6050655382793052 -0.44516470942484049 0.48903047001728517 -1.2390991677675272 1.075904598352474 0.45813427369736687 0.11899753329324565;-0.30844234795945347 -1.1247560495885258 0.60011182079287551 -0.92467962490908673 -0.42717081035749349 -0.6182398603768039 -0.59352694054441191 -0.11977991575067674;0.78047434680988403 0.2496459132864895 0.73492948470283259 0.30847418380997882 -0.97006526834647244 -0.86028698843408391 0.11462920106906141 0.69509704696631369;1.2135866271864093 0.40069480345743519 -0.61468243205016726 0.82392016145260505 0.62434996121212794 0.67292411623713388 0.75950897290206498 -0.054604335495080474;0.60549512895854007 0.63923718654881312 0.52835450853105292 -1.2132156417120612 0.16327363510445145 -0.17259437603733957 -0.95252169323618929 0.164446675286092;-1.1407691358735637 0.2990363725470791 0.025660058474545111 0.10164737128294628 0.77736752365511252 -0.1054907457050656 -1.2877643277483406 0.67391021582502597;0.33117265383145694 0.90233470335713262 0.59504507378092741 0.99242983296994258 -0.14374049133167294 -0.32870870689773019 -0.052088044529622714 0.99060442693504824];

% Layer 2
b2 = -0.15741711020071664;
LW2_1 = [-0.041397618448413089 -1.0435256000584547 -0.30804504930333254 1.1895744691763761 1.4007134624160955 0.042324187302318697 1.1419475716691549 -0.38948273635917274 -1.3042482765835657 -0.70285106179463397];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = logsig_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = a2;
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Positive Transfer Function
function a = logsig_apply(n,~)
a = 1 ./ (1 + exp(-n));
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
